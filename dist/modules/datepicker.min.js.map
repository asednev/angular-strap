{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","allowReadonly","isNative","isTouch","DatepickerFactory","$datepicker","$get","options","$options","pickerViews","views","el","selected","date","element","focus","viewDate","scope","$iconLeft","$iconRight","$hasToday","$picker","$select","disabled","select","$selectPane","value","$views","$mode","$toggleMode","Date","length","$setToday","$clear","setMode","update","isDate","$date","updateDisabledDates","disabledDateRanges","dateRanges","forEach","i","$build","controller","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","$isSelected","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","hide","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$element","$timeout","$isShown","_hide","on","blur","directive","$scope","link","datepickerViews","require","$window","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","key","isDefined","$eval","bsKey","lang","format","dateParser","$dateParser","strict","bsShow","isString","newValue","$watch","oldValue","match","validateAgainstMinMaxDate","$observe","disabledDates","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","parse","split","size","arrays","mod","n","m","arr","splice","$dateFormatter","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","push","isToday","toDateString","today","muted","label","title","showLabels","labels","isTodayDisabled","isSelected","time","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      allowReadonly: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly') && !options.allowReadonly) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            // Elements that have both a datepicker and tooltip can have duplicate event handlers when both\n            // the datepicker and tooltip are open, since datepickers inherit tooltip methods.\n            // Make sure we don't trigger $onMouseDown multiple times for the same event by removing any existing copies of this event handler.\n            $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'allowReadonly'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}
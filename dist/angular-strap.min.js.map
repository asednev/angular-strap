{"version":3,"sources":["angular-strap.js","tab/tab.js","helpers/compiler.js","datepicker/datepicker.js","typeahead/typeahead.js","tooltip/tooltip.js","timepicker/timepicker.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["navClass","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","provider","$scope","$element","self","$options","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","isUndefined","$active","$attrs","$navClass","$remove","index","active","activeIndex","indexOf","splice","map","$setActive","length","name","fn","$pane","$get","$tab","require","transclude","directive","attr","postLink","ngModelCtrl","bsTabsCtrl","$setViewValue","$formatters","push","attrs","modelValue","bsActivePane","parsedBsActivePane","assign","$parse","$watch","newValue","oldValue","$observe","controllers","render","$animate","$isActive","addClass","disabled","trigger","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","activate","$activeIndex","select","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","prefixEvent","isDefined","onSelect","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","results","restrict","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$promise","$new","toLowerCase","$id","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","version","prepend","$applyPlacement","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","allowReadonly","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","bind","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      allowReadonly: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly') && !options.allowReadonly) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'allowReadonly'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      allowReadonly: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly') && !options.allowReadonly) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'allowReadonly'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}